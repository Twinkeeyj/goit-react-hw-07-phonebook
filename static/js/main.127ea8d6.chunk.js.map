{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css","redux/listActions.js","redux/contacts/contactsOperation.js","components/AnswerError/AnswerError.js","redux/listSelector.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/listReducer.js","redux/store.js","index.js"],"names":["module","exports","addListRequest","createAction","addListSuccess","addListError","fetchListRequest","fetchListSuccess","fetchListError","removeListRequest","removeListSuccess","removeListError","filterContact","removeContact","id","dispatch","console","log","listAction","axios","delete","then","catch","error","addContact","name","number","post","response","data","fetchContact","get","AnswerError","isVisible","CSSTransition","in","timeout","classNames","unmountOnExit","className","state","contacts","loading","filter","items","contact","toLowerCase","includes","ContactForm","handleChange","target","setState","value","handleSubmit","event","preventDefault","props","list","some","setTimeout","this","messeg","classes","container","action","onSubmit","label","htmlFor","input","type","placeholder","onChange","Component","mapDispatchToProps","newContact","connect","selector","ContactList","prevProps","prevState","TransitionGroup","component","map","el","button","onClick","Delete","contactsOperation","filterRender","e","App","onFetchContact","isLodingContact","appear","Filter","initialState","createReducer","payload","_","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,MAAQ,2BAA2B,MAAQ,6B,mBCAxGD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,KAAO,0BAA0B,OAAS,8B,wCCAvGD,EAAOC,QAAU,CAAC,UAAY,yB,mKCExBC,EAAiBC,YAAa,uBAC9BC,EAAiBD,YAAa,uBAC9BE,EAAeF,YAAa,qBAE5BG,EAAmBH,YAAa,yBAChCI,EAAmBJ,YAAa,yBAChCK,EAAiBL,YAAa,uBAE9BM,EAAoBN,YAAa,0BACjCO,EAAoBP,YAAa,0BAcxB,GACbQ,gBAdsBR,YAAa,wBAenCO,oBACAD,oBAGAG,cAToBT,YAAa,mBAUjCD,iBACAE,iBACAC,eACAC,mBACAC,mBACAC,kB,iBCEa,GACbK,cAboB,SAACC,GAAD,OAAQ,SAACC,GAC7BC,QAAQC,IAAI,IACZF,EAASG,EAAWT,qBACpBU,IACGC,OADH,yCAC4CN,IACzCO,MAAK,WACJN,EAASG,EAAWR,kBAAkBI,OAEvCQ,OAAM,SAAAC,GAAK,OAAIR,EAASG,EAAWP,gBAAgBY,SAMtDC,WArCiB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OAAsB,SAAAX,GACvCA,EAASG,EAAWhB,kBAEpBiB,IACGQ,KAAK,iCAAkC,CAAEF,OAAMC,WAC/CL,MAAK,SAAAO,GACJb,EAASG,EAAWd,eAAewB,EAASC,UAE7CP,OAAM,SAAAC,GAAK,OAAIR,EAASG,EAAWb,aAAakB,SA8BnDO,aA3BmB,kBAAM,SAAAf,GACzBA,EAASG,EAAWZ,oBAEpBa,IACGY,IAAI,kCACJV,MAAK,YAAe,IAAZQ,EAAW,EAAXA,KAEPd,EAASG,EAAWX,iBAAiBsB,OAEtCP,OAAM,SAAAC,GAAK,OAAIR,EAASG,EAAWV,eAAee,U,QCLxCS,EAfK,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACrB,OACE,cAACC,EAAA,EAAD,CACEC,GAAIF,EACJG,QAAS,IACTC,WAAW,SACXC,eAAa,EAJf,SAME,qBAAKC,UAAU,kBAAf,SACE,8DCLO,EATG,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAS3B,EARG,SAAAF,GAAK,OAAIA,EAAMC,SAASE,QAQ3B,EAPC,SAAAH,GAAK,OAAIA,EAAMC,SAASG,OAOzB,EALC,SAAAJ,GAAK,OACnBA,EAAMC,SAASG,MAAMD,QAAO,SAAAE,GAAO,OACjCA,EAAQpB,KAAKqB,cAAcC,SAASP,EAAMC,SAASE,OAAOG,mBCExDE,E,4MACJR,MAAQ,CACNf,KAAM,GACNC,OAAQ,GACRO,WAAW,G,EAGbgB,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OAChB,EAAKC,SAAL,eACGD,EAAOzB,KAAOyB,EAAOE,S,EAG1BC,aAAe,SAAAC,GAKb,GAJAA,EAAMC,iBACQ,EAAKC,MAAMC,KAAKC,MAC5B,SAAAb,GAAO,OAAIA,EAAQpB,OAAS,EAAKe,MAAMf,QAWvC,OARA,EAAK0B,SAAS,CACZlB,WAAW,SAEb0B,YAAW,WACT,EAAKR,SAAS,CACZlB,WAAW,MAEZ,MAGL,EAAKuB,MAAMhC,WAAX,eAA2B,EAAKgB,QAChC,EAAKW,SAAS,CACZ1B,KAAM,GACNC,OAAQ,M,uDAIF,IAAD,EACqCkC,KAAKpB,MAAzCf,EADD,EACCA,KAAMC,EADP,EACOA,OAAQO,EADf,EACeA,UAAW4B,EAD1B,EAC0BA,OAEjC,OACE,qCACE,8BACE,cAAC,EAAD,CAAa5B,UAAWA,EAAW4B,OAAQA,MAG7C,uBACEtB,UAAWuB,IAAQC,UACnBC,OAAO,GACPC,SAAUL,KAAKP,aAHjB,UAKE,uBAAOd,UAAWuB,IAAQI,MAAOC,QAAQ,OAAzC,kBAGA,uBACE5B,UAAWuB,IAAQM,MACnBC,KAAK,OACL5C,KAAK,OACL6C,YAAY,OACZlB,MAAO3B,EACP8C,SAAUX,KAAKX,eAGjB,uBAAOV,UAAWuB,IAAQI,MAAOC,QAAQ,SAAzC,oBAGA,uBACE5B,UAAWuB,IAAQM,MACnBC,KAAK,MACL5C,KAAK,SACL6C,YAAY,SACZlB,MAAO1B,EACP6C,SAAUX,KAAKX,eAEjB,uBAAOoB,KAAK,SAASjB,MAAM,0B,GAxEXoB,aAmFpBC,EAAqB,CACzBjD,WAAYkD,EAAWlD,YAGVmD,eARS,SAAAnC,GAAK,MAAK,CAChCiB,KAAMmB,EAAiBpC,MAOeiC,EAAzBE,CAA6C3B,G,yBCtFtD6B,E,iLACeC,EAAWC,M,+BAKpB,IAAD,OAEP,OACE,mCACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,KAAK1C,UAAWuB,IAAQC,UAAnD,SACGH,KAAKJ,MAAMC,KAAKyB,KAAI,SAAAC,GACnB,OACE,cAACjD,EAAA,EAAD,CAA2BG,WAAW,aAAaD,QAAS,IAA5D,SACE,qBAAgBG,UAAWuB,IAAQL,KAAnC,UACG0B,EAAG1D,KADN,MACe0D,EAAGzD,OAChB,wBACEa,UAAWuB,IAAQsB,OACnBf,KAAK,SACLgB,QAAS,kBAAM,EAAK7B,MAAM8B,OAAOH,EAAGrE,KAHtC,0DAFOqE,EAAGrE,KADMqE,EAAGrE,e,GAbX0D,aAyCpBC,EAAqB,CACzBa,OAAQC,EAAkB1E,eAGb8D,eAPS,SAAAnC,GAAK,MAAK,CAChCiB,KAAMmB,EAAiBpC,MAMeiC,EAAzBE,CAA6CE,GC3BtDJ,EAAqB,CACzBe,aAActE,EAAWN,eAGZ+D,eARS,SAAAnC,GAAK,MAC5B,CACCG,OAAQiC,EAAmBpC,MAMWiC,EAAzBE,EAxBI,SAAC,GAAD,IAAGa,EAAH,EAAGA,aAAc7C,EAAjB,EAAiBA,OAAjB,OACjB,gCACE,0DACA,uBACE0B,KAAK,OACLjB,MAAOT,EACP4B,SAAU,SAAAkB,GAAC,OAAID,EAAaC,EAAEvC,OAAOE,gB,iBCDrCsC,E,kLAEF9B,KAAKJ,MAAMmC,mB,+BAIX,OACE,qCACC/B,KAAKJ,MAAMoC,iBAAmB,6CAC7B,sBAAKrD,UAAWuB,IAAQC,UAAxB,UACE,cAAC7B,EAAA,EAAD,CACEC,IAAI,EACJE,WAAW,OACXD,QAAS,IACTyD,QAAQ,EACRvD,eAAa,EALf,SAOE,6CAEF,cAAC,EAAD,IACA,0CAEA,cAACwD,EAAD,IAEA,cAAC,EAAD,c,GAxBQtB,aA4CZC,EAAmB,CACvBkB,eAAgBJ,EAAkBzD,cAErB6C,eAPS,SAAAnC,GAAK,MAAK,CAChCoD,gBAAiBhB,EAAmBpC,MAMEiC,EAAzBE,CAA6Ce,G,gBC9CtDK,GACM,GADNA,GAEI,GAQJnD,GAAQoD,YAAcD,IAAD,mBACxB7E,EAAWd,gBANK,SAACoC,EAAOwB,GAAR,4BAAuBxB,GAAvB,CAA8BwB,EAAOiC,aAK7B,cAExB/E,EAAWX,kBAAmB,SAAC2F,EAAGlC,GAAJ,OAAeA,EAAOiC,WAF5B,cAGxB/E,EAAWR,mBANW,SAAC8B,EAAOwB,GAAR,OACvBxB,EAAMG,QAAO,SAAAE,GAAO,OAAIA,EAAQ/B,KAAOkD,EAAOiC,cAErB,IAMrBtD,GAASqD,YAAcD,GAAD,eACzB7E,EAAWN,eAAgB,SAACsF,EAAGlC,GAAJ,OAAeA,EAAOiC,YAE9CvD,GAAUsD,aAAc,GAAD,mBAC1B9E,EAAWhB,gBAAiB,kBAAM,KADR,cAE1BgB,EAAWd,gBAAiB,kBAAM,KAFR,IAMd+F,gBAAgB,CAAEvD,SAAOD,UAAQD,aC7BjC0D,GANDC,YAAe,CAC3BC,QAAS,CACP7D,SAAU8D,MCGdC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.127ea8d6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__3cp-p\",\"label\":\"ContactForm_label___Na4F\",\"input\":\"ContactForm_input__3FFz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__2DWD9\",\"list\":\"ContactList_list__18Z6_\",\"button\":\"ContactList_button__19tYx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3Hywx\"};","// import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addListRequest = createAction('contacts/addRequest');\r\nconst addListSuccess = createAction('contacts/addSuccess');\r\nconst addListError = createAction('contacts/addError');\r\n\r\nconst fetchListRequest = createAction('contacts/fetchRequest');\r\nconst fetchListSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchListError = createAction('contacts/fetchError');\r\n\r\nconst removeListRequest = createAction('contacts/removeRequest');\r\nconst removeListSuccess = createAction('contacts/removeSuccess');\r\nconst removeListError = createAction('contacts/removeError');\r\n\r\n// const addContact = createAction('ADD_CONTACT', ({ name, number }) => ({\r\n//   payload: {\r\n//     contact: { id: uuidv4(), name, number },\r\n//   },\r\n// }));\r\n\r\n// const removeContact = createAction('REMOVE_CONTACT');\r\n\r\nconst filterContact = createAction('FILTER_CONTACTS');\r\n\r\n\r\nexport default {\r\n  removeListError,\r\n  removeListSuccess,\r\n  removeListRequest,\r\n  // addContact,\r\n  // removeContact,\r\n  filterContact,\r\n  addListRequest,\r\n  addListSuccess,\r\n  addListError,\r\n  fetchListRequest,\r\n  fetchListSuccess,\r\n  fetchListError,\r\n\r\n};\r\n","import listAction from '../listActions';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(listAction.addListRequest());\r\n\r\n  axios\r\n    .post('http://localhost:2000/contacts', { name, number})\r\n    .then(response => {\r\n      dispatch(listAction.addListSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(listAction.addListError(error)));\r\n};\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(listAction.fetchListRequest());\r\n\r\n  axios\r\n    .get('http://localhost:2000/contacts')\r\n    .then(({ data }) => {\r\n      // console.log(data);\r\n      dispatch(listAction.fetchListSuccess(data));\r\n    })\r\n    .catch(error => dispatch(listAction.fetchListError(error)));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  console.log(11);\r\n  dispatch(listAction.removeListRequest());\r\n  axios\r\n    .delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(listAction.removeListSuccess(id));\r\n    })\r\n    .catch(error => dispatch(listAction.removeListError(error)));\r\n};\r\n\r\n\r\nexport default {\r\n  removeContact,\r\n  addContact,\r\n  fetchContact,\r\n};\r\n","import React from 'react';\r\n\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../../index.css';\r\n\r\nconst AnswerError = ({ isVisible }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={isVisible}\r\n      timeout={250}\r\n      classNames=\"answer\"\r\n      unmountOnExit\r\n    >\r\n      <div className=\"answerContainer\">\r\n        <p>Contact already declared</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default AnswerError;\r\n","const getLoding = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getForm = state => state.contacts.items;\r\n\r\nconst getList = state =>\r\n  state.contacts.items.filter(contact =>\r\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n  );\r\n\r\nexport default {\r\n  getLoding,\r\n  getFilter,\r\n  getForm,\r\n  getList,\r\n};\r\n","import React, { Component } from 'react';\r\nimport classes from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport newContact from '../../redux/contacts/contactsOperation';\r\nimport AnswerError from '../AnswerError/AnswerError';\r\nimport selector from \"../../redux/listSelector\"\r\n\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    isVisible: false,\r\n      };\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const truly = this.props.list.some(\r\n      contact => contact.name === this.state.name,\r\n    );\r\n    if (truly) {\r\n      this.setState({\r\n        isVisible: true,\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          isVisible: false,\r\n        });\r\n      }, 1500);\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state });\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, isVisible, messeg } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <AnswerError isVisible={isVisible} messeg={messeg} />\r\n        </div>\r\n\r\n        <form\r\n          className={classes.container}\r\n          action=\"\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <label className={classes.label} htmlFor=\"name\">\r\n            Name\r\n          </label>\r\n          <input\r\n            className={classes.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <label className={classes.label} htmlFor=\"number\">\r\n            Number\r\n          </label>\r\n          <input\r\n            className={classes.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input type=\"submit\" value=\"Add contact\" />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  list: selector.getForm(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: newContact.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from './ContactList.module.css';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\n// import listActions from '../../redux/listActions';\r\nimport contactsOperation from '../../redux/contacts/contactsOperation';\r\nimport selector from \"../../redux/listSelector\"\r\n\r\nclass ContactList extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // if (prevProps.list !== this.props.list) {\r\n    //   localStorage.setItem('contacts', JSON.stringify(this.props.list));\r\n    // }\r\n  }\r\n  render() {\r\n    // console.log(this.props.list);\r\n    return (\r\n      <>\r\n        <TransitionGroup component=\"ul\" className={classes.container}>\r\n          {this.props.list.map(el => {\r\n            return (\r\n              <CSSTransition key={el.id} classNames=\"showbutton\" timeout={250}>\r\n                <li key={el.id} className={classes.list}>\r\n                  {el.name} : {el.number}\r\n                  <button\r\n                    className={classes.button}\r\n                    type=\"button\"\r\n                    onClick={() => this.props.Delete(el.id)}\r\n                  >\r\n                    Удалить\r\n                  </button>\r\n                </li>\r\n              </CSSTransition>\r\n            );\r\n          })}\r\n        </TransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  Delete: PropTypes.func.isRequired,\r\n  list: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  list: selector.getList(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  Delete: contactsOperation.removeContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport listAction from '../../redux/listActions';\r\nimport selector from \"../../redux/listSelector\"\r\n\r\n\r\nconst FilterName = ({ filterRender, filter }) => (\r\n  <div>\r\n    <label>Find contacts by name</label>\r\n    <input\r\n      type=\"text\"\r\n      value={filter}\r\n      onChange={e => filterRender(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nFilterName.propTypes = {\r\n  filterRender: PropTypes.func.isRequired,\r\n  filter: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state =>\r\n({\r\n  filter: selector.getFilter(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  filterRender: listAction.filterContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\r\n","import React, { Component } from 'react';\r\n\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/Filter/Filter';\r\nimport classes from './App.module.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport  contactsOperation from \"./redux/contacts/contactsOperation\"\r\nimport selector from \"./redux/listSelector\"\r\n\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContact()\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n      {this.props.isLodingContact && <h1>Loading....</h1>}\r\n        <div className={classes.container}>\r\n          <CSSTransition\r\n            in={true}\r\n            classNames=\"logo\"\r\n            timeout={250}\r\n            appear={true}\r\n            unmountOnExit\r\n          >\r\n            <h1>Phonebook</h1>\r\n          </CSSTransition>\r\n          <ContactForm />\r\n          <h2>Contacts</h2>\r\n\r\n          <Filter />\r\n\r\n          <ContactList />\r\n          {/* <CSSTransition\r\n              in={isVisible}\r\n              timeout={250}\r\n              unmountOnExit\r\n              classNames=\"answer\"\r\n            >\r\n              <AnswerError answer={answer} />\r\n            </CSSTransition> */}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLodingContact: selector.getLoding(state),\r\n});\r\n\r\nconst mapDispatchToProps={\r\n  onFetchContact: contactsOperation.fetchContact\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport listAction from './listActions';\r\n\r\n// const defaultContact = [\r\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n// ];\r\n// const localStore =\r\n//   JSON.parse(localStorage.getItem('contacts')) || defaultContact;\r\n\r\nconst initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n};\r\n\r\nconst newContact = (state, action) => [...state, action.payload];\r\n\r\nconst removeAnyContact = (state, action) =>\r\n  state.filter(contact => contact.id !== action.payload);\r\n\r\nconst items = createReducer(initialState.contacts, {\r\n  [listAction.addListSuccess]: newContact,\r\n  [listAction.fetchListSuccess]: (_, action) => action.payload,\r\n  [listAction.removeListSuccess]: removeAnyContact,\r\n});\r\n\r\nconst filter = createReducer(initialState.filter, {\r\n  [listAction.filterContact]: (_, action) => action.payload,\r\n});\r\nconst loading = createReducer(false, {\r\n  [listAction.addListRequest]: () => true,\r\n  [listAction.addListSuccess]: () => false,\r\n});\r\n// const error = createReducer(null);\r\n\r\nexport default combineReducers({ items, filter, loading });\r\n","import contactsReducer from './listReducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n\r\n"],"sourceRoot":""}